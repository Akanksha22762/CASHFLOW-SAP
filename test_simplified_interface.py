#!/usr/bin/env python3
"""
Test script for simplified interface with cash flow analysis
"""

import requests
import json
import time

def test_simplified_interface():
    """Test the simplified interface with cash flow analysis"""
    
    base_url = "http://localhost:5000"
    
    print("üß™ TESTING SIMPLIFIED INTERFACE WITH CASH FLOW ANALYSIS")
    print("=" * 60)
    
    # Test 1: Transaction Analysis
    print("\n1Ô∏è‚É£ Testing Transaction Analysis...")
    try:
        transaction_data = {
            'transaction_type': 'all',
            'analysis_type': 'cash_flow',  # Should be ignored, always uses cash_flow
            'ai_model': 'hybrid'  # Should be ignored, always uses hybrid
        }
        
        response = requests.post(f"{base_url}/transaction-analysis", json=transaction_data, timeout=30)
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ Transaction Analysis: {result.get('transactions_analyzed', 0)} transactions processed")
            print(f"‚úÖ AI Model: {result.get('ai_model', 'Unknown')}")
            print(f"‚úÖ Analysis Type: {result.get('analysis_type', 'Unknown')}")
            
            if 'data' in result and result['data']:
                print(f"‚úÖ Analysis completed successfully")
            else:
                print(f"‚ö†Ô∏è No analysis data returned")
        else:
            print(f"‚ùå Transaction Analysis failed: {response.status_code}")
            print(f"‚ùå Error: {response.text}")
            
    except Exception as e:
        print(f"‚ùå Transaction Analysis error: {e}")
    
    # Test 2: Vendor Analysis
    print("\n2Ô∏è‚É£ Testing Vendor Analysis...")
    try:
        vendor_data = {
            'vendor': 'auto',  # Extract vendors automatically
            'analysis_type': 'cash_flow',  # Should be ignored, always uses cash_flow
            'ai_model': 'hybrid'  # Should be ignored, always uses hybrid
        }
        
        response = requests.post(f"{base_url}/vendor-analysis", json=vendor_data, timeout=30)
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ Vendor Analysis: {result.get('vendors_analyzed', 0)} vendors processed")
            print(f"‚úÖ AI Model: {result.get('ai_model', 'Unknown')}")
            print(f"‚úÖ Analysis Type: {result.get('analysis_type', 'Unknown')}")
            
            if 'data' in result and result['data']:
                print(f"‚úÖ Analysis completed successfully")
                # Show first vendor result if available
                vendor_names = list(result['data'].keys())
                if vendor_names and vendor_names[0] != 'error':
                    first_vendor = vendor_names[0]
                    print(f"‚úÖ Sample vendor: {first_vendor}")
            else:
                print(f"‚ö†Ô∏è No analysis data returned")
        else:
            print(f"‚ùå Vendor Analysis failed: {response.status_code}")
            print(f"‚ùå Error: {response.text}")
            
    except Exception as e:
        print(f"‚ùå Vendor Analysis error: {e}")
    
    # Test 3: Check if interface is simplified
    print("\n3Ô∏è‚É£ Testing Interface Simplification...")
    try:
        response = requests.get(f"{base_url}/")
        
        if response.status_code == 200:
            html_content = response.text
            
            # Check if Analysis Type dropdowns are removed
            if 'vendorAnalysisDropdown' not in html_content:
                print("‚úÖ Vendor Analysis Type dropdown removed")
            else:
                print("‚ùå Vendor Analysis Type dropdown still present")
            
            if 'transactionAnalysisDropdown' not in html_content:
                print("‚úÖ Transaction Analysis Type dropdown removed")
            else:
                print("‚ùå Transaction Analysis Type dropdown still present")
            
            # Check if AI Model dropdowns are removed
            if 'vendorAIModelDropdown' not in html_content:
                print("‚úÖ Vendor AI Model dropdown removed")
            else:
                print("‚ùå Vendor AI Model dropdown still present")
            
            if 'transactionAIModelDropdown' not in html_content:
                print("‚úÖ Transaction AI Model dropdown removed")
            else:
                print("‚ùå Transaction AI Model dropdown still present")
            
            # Check if Analysis Options section is removed
            if 'Analysis Options' not in html_content:
                print("‚úÖ Analysis Options section removed")
            else:
                print("‚ùå Analysis Options section still present")
            
            # Check if buttons are updated
            if 'Run Cash Flow Analysis' in html_content:
                print("‚úÖ Buttons updated to show 'Run Cash Flow Analysis'")
            else:
                print("‚ùå Buttons not updated")
                
        else:
            print(f"‚ùå Failed to load interface: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Interface test error: {e}")
    
    print("\n" + "=" * 60)
    print("üéØ SIMPLIFIED INTERFACE TEST COMPLETED")
    print("‚úÖ Interface should now be simplified with cash flow analysis only")
    print("‚úÖ All dropdowns for analysis type and AI model should be removed")
    print("‚úÖ Analysis Options section should be completely removed")
    print("‚úÖ Both vendor and transaction analysis should use cash flow analysis with hybrid model")

if __name__ == "__main__":
    test_simplified_interface() 